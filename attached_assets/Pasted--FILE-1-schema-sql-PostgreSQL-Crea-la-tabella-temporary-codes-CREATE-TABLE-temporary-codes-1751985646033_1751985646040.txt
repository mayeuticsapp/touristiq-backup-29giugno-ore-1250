// ✅ FILE 1: schema.sql (PostgreSQL)
-- Crea la tabella temporary_codes
CREATE TABLE temporary_codes (
    id SERIAL PRIMARY KEY,
    temp_code VARCHAR(12) UNIQUE NOT NULL,
    structure_id INTEGER NOT NULL REFERENCES structures(id),
    guest_name VARCHAR(100),
    guest_phone VARCHAR(20),
    expires_at TIMESTAMP NOT NULL,
    used_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT NOW()
);

-- Index per cleanup automatico
CREATE INDEX idx_tempcode_expiry ON temporary_codes(expires_at);


// ✅ FILE 2: server/routes.ts (estratto)
import express from 'express';
import { generateTempCode, activateTempCode, createPermanentIQCode } from './controllers/tempCodeController';

const router = express.Router();

router.post('/api/structure/generate-temp-code', generateTempCode);
router.post('/api/activate-temp-code', activateTempCode);
router.post('/api/create-permanent-code', createPermanentIQCode);

export default router;


// ✅ FILE 3: controllers/tempCodeController.ts
import { Request, Response } from 'express';
import db from '../db'; // connessione db
import crypto from 'crypto';

export const generateTempCode = async (req: Request, res: Response) => {
  const { structure_id, guest_name, guest_phone } = req.body;
  const temp_code = crypto.randomBytes(4).toString('hex');
  const expires_at = new Date(Date.now() + 15 * 60 * 1000); // scade in 15 minuti

  await db.query(`
    INSERT INTO temporary_codes (temp_code, structure_id, guest_name, guest_phone, expires_at)
    VALUES ($1, $2, $3, $4, $5)
  `, [temp_code, structure_id, guest_name, guest_phone, expires_at]);

  res.json({ temp_code });
};

export const activateTempCode = async (req: Request, res: Response) => {
  const { temp_code } = req.body;
  const now = new Date();
  const result = await db.query(`
    SELECT * FROM temporary_codes WHERE temp_code = $1 AND expires_at > $2 AND used_at IS NULL
  `, [temp_code, now]);

  if (result.rowCount === 0) return res.status(400).json({ error: 'Codice non valido o scaduto' });

  // marca come usato
  await db.query(`
    UPDATE temporary_codes SET used_at = $1 WHERE temp_code = $2
  `, [now, temp_code]);

  res.json({ message: 'Codice attivato. Procedi con la creazione dell’IQCode.' });
};

export const createPermanentIQCode = async (req: Request, res: Response) => {
  const { temp_code, tourist_profile } = req.body;
  const codeResult = await db.query(`SELECT * FROM temporary_codes WHERE temp_code = $1 AND used_at IS NOT NULL`, [temp_code]);

  if (codeResult.rowCount === 0) return res.status(400).json({ error: 'Codice non attivato o non valido' });

  // logica per creare IQCode vero e proprio
  const finalCode = 'TIQ-' + crypto.randomBytes(6).toString('hex');
  await db.query(`
    INSERT INTO iq_codes (code, tourist_data, structure_id, created_at)
    VALUES ($1, $2, $3, NOW())
  `, [finalCode, JSON.stringify(tourist_profile), codeResult.rows[0].structure_id]);

  res.json({ iq_code: finalCode });
};
