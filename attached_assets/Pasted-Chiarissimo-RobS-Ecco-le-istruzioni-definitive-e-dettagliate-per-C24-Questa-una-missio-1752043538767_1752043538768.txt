Chiarissimo RobS. Ecco **le istruzioni definitive e dettagliate** per **C24**.
Questa è una **missione chirurgica**: ogni parte del sistema deve cooperare come un’orchestra perfetta.
Nessun frammento lasciato, nessun effetto collaterale trascurato.

---

## 📜 **ISTRUZIONI PER C24 – IMPLEMENTAZIONE SISTEMA IQCODE MONOUSO TURISTA → PARTNER**

### 🔹 OBIETTIVO

Consentire al turista di **generare e comunicare un IQCode monouso** (es. a un partner/ristoratore), che può essere **utilizzato una sola volta**, senza invii né conferme.
L’intero flusso deve essere **anonimo, privacy-first, veloce** e **autosufficiente**.

---

## 🧠 **1. STRUTTURA DATI**

### ✅ Nuova tabella `one_time_codes` (o integrazione in `iq_codes`)

```sql
- id (UUID)
- code (stringa univoca, es. TIQ-OTC-39572)
- touristId (relazione con utente)
- isUsed (boolean) – default: false
- createdAt
- usedAt (nullable)
```

### ✅ Campo `availableOneTimeUses` in `tourists` (es. default: 10)

```ts
tourist: {
  id: 'uuid',
  name: 'Mario',
  iqCode: 'IQ-IT-...', 
  availableOneTimeUses: 10
}
```

---

## 🔧 **2. FRONTEND – PANNELLO TURISTA**

### 🔹 Aggiungere sezione: “IQCode Monouso”

**Posizionamento**: sotto l’IQCode principale.

**Contenuti:**

* Contatore visivo: “Hai 7 codici monouso disponibili”
* Bottone: `🔁 Genera nuovo codice monouso`
* Campo visualizzazione codice (es. TIQ-OTC-32941)
* Bottone `📋 Copia codice`
* (Facoltativo): Tooltip: “Condividilo con il partner per ricevere il tuo vantaggio”

### 🔁 Quando l’utente genera un codice:

* `availableOneTimeUses` viene decrementato (-1)
* Viene creata una nuova entry in `one_time_codes`

---

## 📩 **3. BACKEND – API da implementare**

### `POST /api/tourist/generate-one-time-code`

**Richiesta:**

```json
{ "touristId": "uuid" }
```

**Risposta:**

```json
{ "code": "TIQ-OTC-32941", "remaining": 9 }
```

Effetti:

* Crea nuovo codice monouso
* Aggiorna `availableOneTimeUses` (–1)

---

### `POST /api/partner/use-one-time-code`

**Richiesta:**

```json
{ "code": "TIQ-OTC-32941" }
```

**Risposta (se valido e non usato):**

```json
{ "valid": true, "used": true }
```

Effetti:

* `isUsed = true`
* `usedAt = now()`
* Nessun legame restituito: l’anonimato resta **intatto**

---

## 🖥️ **4. FRONTEND – PANNELLO PARTNER**

### ✅ Nuova sezione: “Valida codice IQ del turista”

* Campo input codice
* Bottone “Verifica”
* Risposta: “✅ Codice valido, vantaggio attivato” oppure “❌ Codice non valido o già usato”

> ⚠️ **Importante**: Nessun legame né identificazione del turista visibile nel pannello partner. Solo verifica binaria.

---

## 📊 **5. VISUALIZZAZIONE & LOGICHE ADMIN**

### Nel pannello admin:

* Aggiungere sezione o colonna: “Codici monouso disponibili per ogni turista”
* Se possibile: storico codici generati e usati, ma **non visibile l’IQCode principale del turista**

---

## 🧹 **6. LOGICA DI SICUREZZA & INTEGRITÀ**

* Nessun codice può essere riutilizzato
* Dopo `isUsed = true`, il codice viene bloccato
* Possibile job di cleanup periodico (es. codici non usati da > 60 giorni → eliminati)

---

## 🧪 **7. TEST E CASI LIMITE**

* ✅ Generazione codice da turista con 0 disponibilità → errore visivo
* ✅ Codice già usato → messaggio chiaro
* ✅ Codice inesistente → messaggio chiaro
* ✅ Contatore sempre aggiornato nel pannello turista

---

## ✨ ESEMPIO FLUSSO COMPLETO

1. **Turista** clicca su “Genera codice” → TIQ-OTC-34958 (rimangono 9)
2. **Turista** comunica il codice al partner (a voce, carta, QR)
3. **Partner** lo inserisce e clicca “Verifica”
4. **Sistema** risponde: “✅ Codice valido” → `isUsed = true`
5. **Fine.** Nessun dato del turista viene trasmesso. Il codice non è più valido.

---

## 🔚 **CONCLUSIONE**

Questa soluzione:

* Protegge la privacy al 100%
* Elimina ogni ritorno o rischio di tracciamento
* Semplifica l’esperienza per tutti gli attori

🧠 **C24, applica questa logica in modo perfetto, pulito e coerente.**
Usa nomi consistenti, documenta tutto e assicurati che ogni parte del sistema venga aggiornato.

Fammi sapere appena inizi l'implementazione, così Geppo tiene tutto sotto controllo.
